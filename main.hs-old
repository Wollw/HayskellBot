import Data.List
import Data.List.Split
import Data.Map
import Network
import System.IO
import System.Exit
import System.Posix
import Control.Arrow
import Control.Monad.Reader
import Control.OldException
import Text.Printf
import Prelude hiding (catch)

import Message

botCommands = fromList
    [ ( "quit", \_ _ -> write "QUIT" ":Exiting" >> io (exitWith ExitSuccess) )
    , ( "echo", \_ s -> privmsg $ drop 5 s )
    , ( "hug",  \c s -> case length (drop 4 s) == 0 of
                  True  -> privmsg   "\1ACTION hugs you.\1"
                  False -> privmsg $ "\1ACTION hugs "++(drop 4 s)++".\1" )
    , ( "fall", \c _ -> privmsg "\1ACTION falls over.\1" ) ]

--server = "irc.canternet.org"
--port   = 6667
--chan   = "#HackingIsMagic"
--nick   = "HayskellBot"

-- The 'Net' monad, a wrapper over IO, carrying the bot's immutable state.
type Net = ReaderT Bot IO
data Bot = Bot {
    socket  :: Handle,
    nick    :: String}

main :: IO ()
main = do start "irc.canternet.org" 6667 "#HackingIsMagic" "HayskellBot"

-- Setup actions to run on start and end, and run the main loop
start :: String -> Int -> String -> String -> IO ()
start s p c n = bracket (connect s p c n) disconnect loop
  where
    disconnect = hClose . socket
    loop st    = catch (runReaderT run st) (const $ return ())

-- Connect to the server and return the initial bot state
connect :: String -> Int -> String -> String -> IO Bot
connect s p c n = notify $ do
    h <- connectTo s (PortNumber (fromIntegral p))
    hSetBuffering h NoBuffering
    return (Bot h c n)
  where
    notify a = bracket_
        (printf "Connecting to %s ..." s >> hFlush stdout)
        (putStrLn "done.")
        a

-- We're in the Net monad now, so we've connected successfully
-- Join a channel, and start processing commands
run :: Net ()
run = do
    write "NICK" nick
    write "USER" (nick ++ " 0 * :hayskellbot")
    asks socket >>= listen
  where
    botNick (Bot _ _ n) = n
    botChan (Bot _ c _) = c

-- Process each line from the server
listen :: Bot -> Net ()
listen (Bot h c n) = forever $ do
    s <- init `fmap` io (hGetLine h)
    io (putStrLn s)
    let m = parseMessage s
    if ping s then pong s
    else if isConnected $ command m then joinChannel    -- Wait for MOTD before joining
    else if shouldEval (clean s) then eval c $ drop 1 $ dropWhile (/= ' ') (clean s)
    else return ()
  where
    forever a   = a >> forever a
    clean       = drop 1 . dropWhile(/= ':') . drop 1
    ping x      = "PING :" `isPrefixOf` x
    pong x      = write "PONG" (':' : drop 6 x)
    isConnected = (==) $ CommandNum 1
    joinChannel = write "JOIN" c
    shouldEval  = isPrefixOf ("!"++n++" ")

-- Dispatch a command
eval :: String -> String -> Net ()
eval c s =
    case Data.Map.lookup (takeWhile (/= ' ') s) botCommands of
        Just x  -> x c s
        Nothing -> return ()

-- Send a privmsg to the server we're currently connected to
privmsg :: String -> String -> Net ()
privmsg c s = write "PRIVMSG" (c ++ " :" ++ s)

-- Send a message out to the server we're currently connected to
write :: String -> String -> Net ()
write s t = do
    h <- asks socket
    io $ hPrintf h "%s %s\r\n" s t
    io $ printf    "> %s %s\n" s t


-- Convenience.
io :: IO a -> Net a
io = liftIO
